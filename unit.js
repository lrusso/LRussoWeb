import { join, extname, resolve } from "path"
import { existsSync, readFileSync, readdirSync, statSync } from "fs"

// JEST LITE - MODIFIED VERSION OF https://unpkg.com/jest-lite@1.0.0-alpha.4/dist/core.js
new Function(
  Buffer.from(
    "",
    "base64"
  ).toString("utf8")
)()

// ----------------------------------------------------------------------------
// HOW TO USE THIS IMPLEMENTATION?
// ----------------------------------------------------------------------------
//
// ADD A JEST TEST TO THE BOTTOM OF THIS FILE:
//
// describe("Example", function () {
//  it("Should test something", function () {
//    const myValue = true
//    expect(myValue).toBe(true)
//   })
// })
//
// THEN RUN:
//
// node unit
//

function findAllFilesRecursive(dir) {
  const files = []

  try {
    const stats = statSync(dir)
    if (!stats.isDirectory()) {
      return files
    }
  } catch (error) {
    return files
  }

  const entries = readdirSync(dir)

  for (const entry of entries) {
    const fullPath = join(dir, entry)

    try {
      const stats = statSync(fullPath)

      if (stats.isDirectory()) {
        files.push(...findAllFilesRecursive(fullPath))
      } else if (stats.isFile()) {
        files.push(fullPath)
      }
    } catch (error) {
      //
    }
  }

  return files
}

function alphaNumericSort(a, b) {
  const nameA = a.toLowerCase()
  const nameB = b.toLowerCase()

  const isDigitA = /^\d/.test(nameA)
  const isDigitB = /^\d/.test(nameB)

  if (isDigitA && !isDigitB) {
    return -1
  }

  if (!isDigitA && isDigitB) {
    return 1
  }

  return nameA.localeCompare(nameB)
}

const startDir = resolve(process.cwd())

function fileExists(filePath) {
  let dir = "."
  if (filePath.includes("/")) {
    dir = filePath.substring(0, filePath.lastIndexOf("/"))
  }

  let base = filePath
  if (base.includes("/")) {
    base = filePath.substring(filePath.lastIndexOf("/") + 1, filePath.length)
  }

  if (!existsSync(dir)) {
    return false
  }

  const entries = readdirSync(dir)
  if (!entries.includes(base)) {
    return false
  }

  if (filePath.includes("/")) {
    if (!folderExists(dir)) {
      return false
    }
  }

  const fullPath = dir === "." ? base : dir + "/" + base
  const stats = statSync(fullPath)
  return stats.isFile()
}

function folderExists(folderPath) {
  let dir = "."
  if (folderPath.includes("/")) {
    dir = folderPath.substring(0, folderPath.lastIndexOf("/"))
  }

  let base = folderPath
  if (base.includes("/")) {
    base = folderPath.substring(folderPath.lastIndexOf("/") + 1, folderPath.length)
  }

  if (!existsSync(dir)) {
    return false
  }

  const entries = readdirSync(dir, { withFileTypes: true })
  const match = entries.find(function (entry) {
    return entry.name === base && entry.isDirectory()
  })

  return !!match
}

function generateHash(s) {
  return Math.abs(
    [...s].reduce(function (h, c) {
      return ((h << 5) - h + c.charCodeAt(0)) | 0
    }, 0)
  ).toString(16)
}

function getVariable(filename, variableName) {
  try {
    const content = readFileSync(filename, "utf8")
    const regex = new RegExp(
      "\\b(?:const|let|var)\\s+" +
        variableName +
        "\\s*=\\s*([\\s\\S]*?)(?=^\\s*(?:const|let|var|function|class|export|import|$))",
      "m"
    )
    const match = content.match(regex)
    return match ? match[1].trim() : ""
  } catch (err) {
    return ""
  }
}

function langsCheckAmountKeys(jsonData) {
  let keysStored = null
  let sameAmount = true

  try {
    jsonData = jsonData.replace(/:\s*'([^']*)'/g, ": \'$1\'")
    jsonData = jsonData.replace(/:\s*'((?:\\'|[^'])*)'/g, function (_, group) {
      const escaped = group.replace(/"/g, '\\"')
      return ': "$' + escaped + '"'
    })

    jsonData = JSON.parse(jsonData)
    const languages = Object.keys(jsonData)
    for (let i = 0; i < languages.length; i++) {
      const lang = languages[i]
      const stringCounter = Object.keys(jsonData[lang]).length
      if (!keysStored) {
        keysStored = stringCounter
      } else if (keysStored !== stringCounter) {
        sameAmount = false
      }
    }
  } catch (err) {
    sameAmount = false
  }

  try {
    if (!sameAmount) {
      sameAmount = ""
      const languages = Object.keys(jsonData)
      for (let i = 0; i < languages.length; i++) {
        const lang = languages[i]
        const stringCounter = Object.keys(jsonData[lang]).length
        if (!sameAmount) {
          sameAmount = lang + "(" + stringCounter + ")"
        } else {
          sameAmount = sameAmount + " " + lang + "(" + stringCounter + ")"
        }
      }
    }
  } catch (err) {
    //
  }

  return sameAmount
}

function langsCheckSameKeys(jsonData) {
  let allLanguagesHaveSameKeys = true
  let referenceKeys = null
  const differences = {}

  try {
    jsonData = jsonData.replace(/:\s*'([^']*)'/g, ": \'$1\'")
    jsonData = jsonData.replace(/:\s*'((?:\\'|[^'])*)'/g, function (_, group) {
      const escaped = group.replace(/"/g, '\\"')
      return ': "' + escaped + '"'
    })
    jsonData = JSON.parse(jsonData)
    const languages = Object.keys(jsonData)

    for (const lang of languages) {
      const keys = Object.keys(jsonData[lang]).sort()

      if (!referenceKeys) {
        referenceKeys = keys
      } else {
        // Find keys missing or extra compared to reference
        const missingKeys = referenceKeys.filter(function (k) {
          return !keys.includes(k)
        })
        const extraKeys = keys.filter(function (k) {
          return !referenceKeys.includes(k)
        })

        if (missingKeys.length > 0 || extraKeys.length > 0) {
          allLanguagesHaveSameKeys = false
          differences[lang] = {}
          if (missingKeys.length > 0) {
            differences[lang].missing = missingKeys
          }
          if (extraKeys.length > 0) {
            differences[lang].extra = extraKeys
          }
        }
      }
    }
  } catch (err) {
    allLanguagesHaveSameKeys = false
  }

  if (!allLanguagesHaveSameKeys) {
    allLanguagesHaveSameKeys = differences
  }

  return allLanguagesHaveSameKeys
}

function langsCheckEmptyKeys(jsonData) {
  let allLanguagesHaveNoEmptyKeys = true
  const emptyKeys = {}

  try {
    jsonData = jsonData.replace(/:\s*'([^']*)'/g, ": \'$1\'")
    jsonData = jsonData.replace(/:\s*'((?:\\'|[^'])*)'/g, function (_, group) {
      const escaped = group.replace(/"/g, '\\"')
      return ': "$' + escaped + '"'
    })
    jsonData = JSON.parse(jsonData)
    const languages = Object.keys(jsonData)

    for (const lang of languages) {
      const entries = Object.entries(jsonData[lang])
      const emptyForLang = entries
        .filter(function ([, value]) {
          return value === "" || value === null || value === undefined
        })
        .map(function ([key]) {
          return key
        })

      if (emptyForLang.length > 0) {
        allLanguagesHaveNoEmptyKeys = false
        emptyKeys[lang] = emptyForLang
      }
    }
  } catch (err) {
    allLanguagesHaveNoEmptyKeys = false
  }

  if (!allLanguagesHaveNoEmptyKeys) {
    allLanguagesHaveNoEmptyKeys = emptyKeys
  }

  return allLanguagesHaveNoEmptyKeys
}

function getImageSize(filePath) {
  const buffer = readFileSync(filePath)

  if (isPng(buffer)) {
    return getPngSize(buffer)
  } else if (isJpeg(buffer)) {
    return getJpegSize(buffer)
  } else if (isWebp(buffer)) {
    return getWebpSize(buffer)
  } else if (isSvg(buffer)) {
    return getSvgSize(buffer)
  } else {
    throw new Error("Unsupported image format")
  }
}

function isPng(buf) {
  return buf[0] === 0x89 && buf.toString("ascii", 1, 4) === "PNG"
}

function getPngSize(buf) {
  const width = buf.readUInt32BE(16)
  const height = buf.readUInt32BE(20)
  return { format: "png", width, height }
}

function isJpeg(buf) {
  return buf[0] === 0xff && buf[1] === 0xd8
}

function getJpegSize(buf) {
  let offset = 2
  while (offset < buf.length) {
    if (buf[offset] !== 0xff) {
      throw new Error("Invalid JPEG marker")
    }

    const marker = buf[offset + 1]

    if (
      marker >= 0xc0 &&
      marker <= 0xcf &&
      marker !== 0xc4 &&
      marker !== 0xc8 &&
      marker !== 0xcc
    ) {
      const height = buf.readUInt16BE(offset + 5)
      const width = buf.readUInt16BE(offset + 7)
      return { format: "jpeg", width, height }
    } else {
      const segmentLength = buf.readUInt16BE(offset + 2)
      offset += 2 + segmentLength
    }
  }
  throw new Error("Size not found in JPEG file")
}

function isWebp(buf) {
  return (
    buf.toString("ascii", 0, 4) === "RIFF" && buf.toString("ascii", 8, 12) === "WEBP"
  )
}

function getWebpSize(buf) {
  const chunkType = buf.toString("ascii", 12, 16)

  if (chunkType === "VP8 ") {
    const start = 26
    const width = buf.readUInt16LE(start) & 0x3fff
    const height = buf.readUInt16LE(start + 2) & 0x3fff
    return { format: "webp (lossy)", width, height }
  }

  if (chunkType === "VP8L") {
    const start = 21
    const b0 = buf[start + 1]
    const b1 = buf[start + 2]
    const b2 = buf[start + 3]
    const b3 = buf[start + 4]

    const width = 1 + (((b1 & 0x3f) << 8) | b0)
    const height = 1 + (((b3 & 0x0f) << 10) | (b2 << 2) | ((b1 & 0xc0) >> 6))
    return { format: "webp (lossless)", width, height }
  }

  if (chunkType === "VP8X") {
    const start = 24
    const width = 1 + buf[start] + (buf[start + 1] << 8) + (buf[start + 2] << 16)
    const height =
      1 + buf[start + 3] + (buf[start + 4] << 8) + (buf[start + 5] << 16)
    return { format: "webp (extended)", width, height }
  }

  throw new Error("Unsupported WebP chunk type: " + chunkType)
}

function isSvg(buf) {
  const head = buf.toString("utf8", 0, 100).toLowerCase()
  return head.includes("<svg")
}

function getSvgSize(buf) {
  const text = buf.toString("utf8")

  const widthMatch = text.match(/\bwidth=["']?([\d.]+)(px)?["']?/i)
  const heightMatch = text.match(/\bheight=["']?([\d.]+)(px)?["']?/i)

  if (widthMatch && heightMatch) {
    return {
      format: "svg",
      width: parseFloat(widthMatch[1]),
      height: parseFloat(heightMatch[1]),
    }
  }

  const viewBoxMatch = text.match(/\bviewBox=["']?([\d.\s-]+)["']?/i)
  if (viewBoxMatch) {
    const parts = viewBoxMatch[1].trim().split(/\s+/)
    if (parts.length === 4) {
      const width = parseFloat(parts[2])
      const height = parseFloat(parts[3])
      return { format: "svg", width, height }
    }
  }

  throw new Error("SVG size not found")
}

describe(".github/workflows/ci.yml", function () {
  it("Should exist", function () {
    expect(fileExists(".github/workflows/ci.yml")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "260cf6b4"
    let currentHash = ""

    try {
      const content = readFileSync(".github/workflows/ci.yml", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe(".github/workflows/cronjob.js", function () {
  it("Should exist", function () {
    expect(fileExists(".github/workflows/cronjob.js")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "5b48f338"
    let currentHash = ""

    try {
      const content = readFileSync(".github/workflows/cronjob.js", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe(".github/workflows/cronjob.yml", function () {
  it("Should exist", function () {
    expect(fileExists(".github/workflows/cronjob.yml")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "119ab950"
    let currentHash = ""

    try {
      const content = readFileSync(".github/workflows/cronjob.yml", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe(".github/workflows/headless-browser.yml", function () {
  it("Should exist", function () {
    expect(fileExists(".github/workflows/headless-browser.yml")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "2c5bc429"
    let currentHash = ""

    try {
      const content = readFileSync(".github/workflows/headless-browser.yml", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("HeadlessBrowser/build.js", function () {
  it("Should exist", function () {
    expect(fileExists("HeadlessBrowser/build.js")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "2eee3c00"
    let currentHash = ""

    try {
      const content = readFileSync("HeadlessBrowser/build.js", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("HeadlessBrowser/HeadlessBrowser.js", function () {
  it("Should exist", function () {
    expect(fileExists("HeadlessBrowser/HeadlessBrowser.js")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "628c1322"
    let currentHash = ""

    try {
      const content = readFileSync("HeadlessBrowser/HeadlessBrowser.js", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("Intranet/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("Intranet/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "19034f56"
    let currentHash = ""

    try {
      const content = readFileSync("Intranet/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("Intranet/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("Intranet/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Intranet/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Intranet/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })

  it("Should have a valid desktop variable", function () {
    let desktopExists = true

    try {
      JSON.parse(
        getVariable("Intranet/index.html", "DESKTOP_FILES")
          .replace(/,\s*([}\]])/g, "$1")
          .replace(
            /([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g,
            '$1"$2":'
          )
          .replace(/<iframe[\s\S]*?<\/iframe>/gim, "data:text/html;base64,")
          .replace(/(?<=^|\:)\s*\b\w+\s*\([^()]*\)/gm, '"MOCK"')
      )
    } catch (err) {
      desktopExists = false
    }

    expect(desktopExists).toBe(true)
  })

  it("Should have valid desktop shortcuts", function () {
    let DESKTOP_FILES = getVariable("Intranet/index.html", "DESKTOP_FILES")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')
      .replace(/<iframe[\s\S]*?<\/iframe>/gim, "data:text/html;base64,")
      .replace(/(?<=^|\:)\s*\b\w+\s*\([^()]*\)/gm, '"MOCK"')

    let validShortcuts = true
    const invalidShortcuts = []

    try {
      DESKTOP_FILES = JSON.parse(DESKTOP_FILES)
      for (let i = 0; i < DESKTOP_FILES.length; i++) {
        const shortcut = DESKTOP_FILES[i]
        if (
          !(
            typeof shortcut.filename === "string" &&
            shortcut.filename !== "" &&
            typeof shortcut.icon === "string" &&
            shortcut.icon !== "" &&
            typeof shortcut.content === "string" &&
            shortcut.content !== ""
          )
        ) {
          invalidShortcuts.push("Shortcut " + (i + 1) + " is not valid")
        }
      }

      if (invalidShortcuts.length > 0) {
        validShortcuts = invalidShortcuts.join(", ")
      }
    } catch (err) {
      validShortcuts = false
    }

    expect(validShortcuts).toBe(true)
  })
})

describe("MediaPlayer/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("MediaPlayer/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "47f401a5"
    let currentHash = ""

    try {
      const content = readFileSync("MediaPlayer/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("Pool/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("Pool/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "3500777"
    let currentHash = ""

    try {
      const content = readFileSync("Pool/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("Pool/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("Pool/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Pool/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Pool/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })
})

describe("Resources/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("Resources/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "59661eb6"
    let currentHash = ""

    try {
      const content = readFileSync("Resources/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should not use groups in the SVG files", function () {
    let usingGroups = false

    try {
      const content = readFileSync("Resources/index.html", "utf8")
      usingGroups = content.indexOf("<g") > -1 ? true : false
    } catch (err) {
      usingGroups = true
    }

    expect(usingGroups).toBe(false)
  })

  it("Should have an ID for every SVG image", function () {
    let validSVGs = true

    try {
      const content = readFileSync("Resources/index.html", "utf8")
      const svgTags = content.match(/<svg[^>]*>/g)
      if (svgTags && svgTags.length > 0) {
        let missingIDs = []
        for (let i = 0; i < svgTags.length; i++) {
          if (!/id\s*=\s*["'][^"']+["']/.test(svgTags[i])) {
            missingIDs.push("SVG " + (i + 1))
          }
        }
        if (missingIDs.length > 0) {
          validSVGs = missingIDs.join(", ")
        }
      }
    } catch (err) {
      validSVGs = false
    }

    expect(validSVGs).toBe(true)
  })

  it("Should have an ID for every IMG image", function () {
    let validIMGs = true

    try {
      const content = readFileSync("Resources/index.html", "utf8")
      const imgTags = content.match(/<img[^>]*>/g)
      if (imgTags && imgTags.length > 0) {
        let missingIDs = []
        for (let i = 0; i < imgTags.length; i++) {
          if (!/id\s*=\s*["'][^"']+["']/.test(imgTags[i])) {
            missingIDs.push("IMG " + (i + 1))
          }
        }
        if (missingIDs.length > 0) {
          validIMGs = missingIDs.join(", ")
        }
      }
    } catch (err) {
      validIMGs = false
    }

    expect(validIMGs).toBe(true)
  })
})

describe("ResumeChecker/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("ResumeChecker/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "59d4695a"
    let currentHash = ""

    try {
      const content = readFileSync("ResumeChecker/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("Spider/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("Spider/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "325a2e34"
    let currentHash = ""

    try {
      const content = readFileSync("Spider/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("Spider/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("Spider/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Spider/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Spider/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })
})

describe("Taipei/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("Taipei/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "6ca809bf"
    let currentHash = ""

    try {
      const content = readFileSync("Taipei/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("Taipei/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("Taipei/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Taipei/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Taipei/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })
})

describe("Tarot/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("Tarot/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "74d84076"
    let currentHash = ""

    try {
      const content = readFileSync("Tarot/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("Tarot/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("Tarot/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Tarot/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Tarot/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })
})

describe("Tetris/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("Tetris/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "3e5bed0e"
    let currentHash = ""

    try {
      const content = readFileSync("Tetris/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("Tetris/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("Tetris/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Tetris/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("Tetris/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })
})

describe("TinyACE/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("TinyACE/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "29242c94"
    let currentHash = ""

    try {
      const content = readFileSync("TinyACE/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("TinyACE/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("TinyACE/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("TinyACE/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("TinyACE/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })
})

describe("TinyDOC/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("TinyDOC/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "55f08396"
    let currentHash = ""

    try {
      const content = readFileSync("TinyDOC/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("TinyDOC/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("TinyDOC/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("TinyDOC/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("TinyDOC/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })
})

describe("TinyIMG/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("TinyIMG/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "3e146476"
    let currentHash = ""

    try {
      const content = readFileSync("TinyIMG/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("TinyIMG/index.html", "APP_STRINGS")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const APP_STRINGS = getVariable("TinyIMG/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(APP_STRINGS)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const APP_STRINGS = getVariable("TinyIMG/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(APP_STRINGS)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const APP_STRINGS = getVariable("TinyIMG/index.html", "APP_STRINGS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(APP_STRINGS)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })
})

describe("WebcamRecorder/index.html", function () {
  it("Should exist", function () {
    expect(fileExists("WebcamRecorder/index.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "7777cead"
    let currentHash = ""

    try {
      const content = readFileSync("WebcamRecorder/index.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("404.html", function () {
  it("Should exist", function () {
    expect(fileExists("404.html")).toBe(true)
  })

  it("Should contain redirects", function () {
    const variableExists = getVariable("404.html", "redirects")
    expect(variableExists).not.toBe("")
  })

  it("Should have a JSON redirects list", function () {
    const redirectsList = getVariable("404.html", "redirects").replace(
      /,\s*([}\]])/g,
      "$1"
    )
    let isValidJSON = true

    try {
      JSON.parse(redirectsList)
    } catch (err) {
      isValidJSON = false
    }

    expect(isValidJSON).toBe(true)
  })

  it("Should have valid folders", function () {
    const redirectsList = getVariable("404.html", "redirects")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')
    let linksValid = true

    try {
      const redirects = JSON.parse(redirectsList)
      const missingPaths = []

      for (const folderPath of Object.values(redirects)) {
        const fullPath = "." + folderPath
        if (!folderExists(fullPath)) {
          missingPaths.push(folderPath)
        }
      }

      if (missingPaths.length > 0) {
        linksValid = missingPaths.join(", ")
      }
    } catch (err) {
      linksValid = false
    }

    expect(linksValid).toBe(true)
  })

  it("Should have valid folders containing an index.html file", function () {
    const redirectsList = getVariable("404.html", "redirects")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')
    let linksValid = true

    try {
      const redirects = JSON.parse(redirectsList)
      const missingPaths = []

      for (const folderPath of Object.values(redirects)) {
        const fullPath = "." + folderPath + "/index.html"
        if (!fileExists(fullPath)) {
          missingPaths.push(folderPath + "/index.html")
        }
      }

      if (missingPaths.length > 0) {
        linksValid = missingPaths.join(", ")
      }
    } catch (err) {
      linksValid = false
    }

    expect(linksValid).toBe(true)
  })
})

const listFavIcons = [
  { "img_Cover.webp": "1b32771d" },
  { "img_FavIcon_16x16.webp": "47cf21c4" },
  { "img_FavIcon_32x32.webp": "6d396933" },
  { "img_FavIcon_48x48.webp": "437215da" },
  { "img_FavIcon_192x192.webp": "722c7462" },
  { "img_FavIcon_512x512.webp": "ccd2e9c" },
  { "img_FavIcon_512x512b.webp": "1ed3c523" },
  { "img_FavIcon.svg": "2e976d87" },
  { "img_Placeholder_1.webp": "527d8f6e" },
  { "img_Placeholder_2.webp": "25d66058" },
]

for (let i = 0; i < listFavIcons.length; i++) {
  const filename = Object.keys(listFavIcons[i])[0]
  const expectedHash = Object.values(listFavIcons[i])[0]
  describe(filename, function () {
    it("Should exist", function () {
      expect(fileExists(filename)).toBe(true)
    })

    it("Should be a valid image", function () {
      let imageValid = true
      try {
        getImageSize(filename, "utf8")
      } catch (err) {
        imageValid = false
      }
      expect(imageValid).toBe(true)
    })

    it("Should not have changed", function () {
      let currentHash = ""

      try {
        const content = readFileSync(filename, "utf8")
        currentHash = generateHash(content)
      } catch (err) {
        currentHash = ""
      }

      expect(currentHash).toBe(expectedHash)
    })
  })
}

describe("index.html", function () {
  it("Should exist", function () {
    expect(fileExists("index.html")).toBe(true)
  })

  it("Should define the i18n variable", function () {
    const variableExists = getVariable("index.html", "STR")
    expect(variableExists).not.toBe("")
  })

  it("Should have equal i18n key counts across languages", function () {
    const STR = getVariable("index.html", "STR")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const sameAmount = langsCheckAmountKeys(STR)

    expect(sameAmount).toBe(true)
  })

  it("Should have matching i18n keys across languages", function () {
    const STR = getVariable("index.html", "STR")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveSameKeys = langsCheckSameKeys(STR)

    expect(allLanguagesHaveSameKeys).toBe(true)
  })

  it("Should have non-empty i18n keys across languages", function () {
    const STR = getVariable("index.html", "STR")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    const allLanguagesHaveNoEmptyKeys = langsCheckEmptyKeys(STR)

    expect(allLanguagesHaveNoEmptyKeys).toBe(true)
  })

  it("Should show titles for latest projects", function () {
    let STR = getVariable("index.html", "STR")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let showingLatestTitles = true

    try {
      STR = JSON.parse(STR)

      const missingTitles = []
      const latestKeys = ["latest1t", "latest2t", "latest3t"]

      for (const [lang, data] of Object.entries(STR)) {
        for (const key of latestKeys) {
          const value = data[key]
          if (typeof value !== "string" || value.trim() === "") {
            missingTitles.push(lang + ":" + key)
          }
        }
      }

      if (missingTitles.length > 0) {
        showingLatestTitles =
          "Missing or invalid titles for: " + missingTitles.join(", ")
      }
    } catch (err) {
      showingLatestTitles = false
    }

    expect(showingLatestTitles).toBe(true)
  })

  it("Should show images for latest projects", function () {
    let imageLoaderFound = true

    try {
      const content = readFileSync("index.html", "utf8")
      if (content.includes("img_Latest_")) {
        imageLoaderFound = true
      } else {
        imageLoaderFound = "Image loader not found"
      }
    } catch (err) {
      imageLoaderFound = "Image loader not found"
    }

    expect(imageLoaderFound).toBe(true)
  })

  it("Should have existing images for latest projects", function () {
    const imageFiles = [
      "img_Latest_1.webp",
      "img_Latest_2.webp",
      "img_Latest_3.webp",
    ]

    let latestImagesAreValid = true
    const invalidImages = []

    for (const file of imageFiles) {
      try {
        readFileSync(file, "utf8")
      } catch {
        invalidImages.push(file)
      }
    }

    if (invalidImages.length > 0) {
      latestImagesAreValid =
        "Invalid projects image files: " + invalidImages.join(", ")
    }

    expect(latestImagesAreValid).toBe(true)
  })

  it("Should have valid images for latest projects", function () {
    const imageFiles = [
      "img_Latest_1.webp",
      "img_Latest_2.webp",
      "img_Latest_3.webp",
    ]

    let latestImageExists = true
    const missingImages = []

    for (const file of imageFiles) {
      try {
        getImageSize(file, "utf8")
      } catch {
        missingImages.push(file)
      }
    }

    if (missingImages.length > 0) {
      latestImageExists = "Invalid projects image files: " + missingImages.join(", ")
    }

    expect(latestImageExists).toBe(true)
  })

  it("Should show descriptions for latest projects", function () {
    let STR = getVariable("index.html", "STR")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let showingLatestDescriptions = true

    try {
      STR = JSON.parse(STR)

      const missingDescriptions = []
      const latestKeys = ["latest1d", "latest2d", "latest3d"]

      for (const [lang, data] of Object.entries(STR)) {
        for (const key of latestKeys) {
          const value = data[key]
          if (typeof value !== "string" || value.trim() === "") {
            missingDescriptions.push(lang + ":" + key)
          }
        }
      }

      if (missingDescriptions.length > 0) {
        showingLatestDescriptions =
          "Missing or invalid descriptions for: " + missingDescriptions.join(", ")
      }
    } catch (err) {
      showingLatestDescriptions = false
    }

    expect(showingLatestDescriptions).toBe(true)
  })

  it("Should display buttons for latest projects", function () {
    let LATEST = getVariable("index.html", "LATEST")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let showingLatestButtons = true

    try {
      LATEST = JSON.parse(LATEST)
      const missingButtons = []

      for (let i = 0; i < LATEST.length; i++) {
        const button = LATEST[i].t
        if (button !== "app" && button !== "website") {
          missingButtons.push(
            "Project " + (i + 1) + " is not showing a valid button"
          )
        }
      }

      if (missingButtons.length > 0) {
        showingLatestButtons = missingButtons.join(", ")
      }
    } catch (err) {
      showingLatestButtons = false
    }

    expect(showingLatestButtons).toBe(true)
  })

  it("Should show links for latest projects", function () {
    let LATEST = getVariable("index.html", "LATEST")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let showingLatestLinks = true

    try {
      LATEST = JSON.parse(LATEST)
      const missingLinks = []

      for (let i = 0; i < LATEST.length; i++) {
        const link = LATEST[i].l
        let validLink = true

        if (typeof link !== "string") {
          validLink = false
        } else if (link.indexOf("https://") !== 0) {
          validLink = false
        }

        if (!validLink) {
          missingLinks.push("Project " + (i + 1) + " is not showing a valid link")
        }
      }

      if (missingLinks.length > 0) {
        showingLatestLinks = missingLinks.join(", ")
      }
    } catch (err) {
      showingLatestLinks = false
    }

    expect(showingLatestLinks).toBe(true)
  })

  it("Should show titles for articles", function () {
    let PRESS = getVariable("index.html", "PRESS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let showingArticlesTitles = true

    try {
      PRESS = JSON.parse(PRESS)
      const missingTitles = []

      for (let i = 0; i < PRESS.length; i++) {
        const title = PRESS[i].t
        if (title === "" || typeof title !== "string") {
          missingTitles.push("Article " + (i + 1) + " is not showing a valid title")
        }
      }

      if (missingTitles.length > 0) {
        showingArticlesTitles = missingTitles.join(", ")
      }
    } catch (err) {
      showingArticlesTitles = false
    }

    expect(showingArticlesTitles).toBe(true)
  })

  it("Should display images for articles", function () {
    let PRESS = getVariable("index.html", "PRESS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let showingArticlesImages = true

    try {
      PRESS = JSON.parse(PRESS)
      const missingImages = []

      for (let i = 0; i < PRESS.length; i++) {
        const image = PRESS[i].i
        if (image === "" || typeof image !== "string") {
          missingImages.push("Article " + (i + 1) + " is not showing a valid image")
        }
      }

      if (missingImages.length > 0) {
        showingArticlesImages = missingImages.join(", ")
      }
    } catch (err) {
      showingArticlesImages = false
    }

    expect(showingArticlesImages).toBe(true)
  })

  it("Should have existing images for articles", function () {
    let PRESS = getVariable("index.html", "PRESS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let articleImagesExists = true

    try {
      PRESS = JSON.parse(PRESS)
      const missingImages = []

      for (let i = 0; i < PRESS.length; i++) {
        const imageFile = "img_Press_" + PRESS[i].i + ".webp"
        if (!fileExists(imageFile)) {
          missingImages.push("Article " + (i + 1) + " is not showing a valid image")
        }
      }

      if (missingImages.length > 0) {
        articleImagesExists = missingImages.join(", ")
      }
    } catch (err) {
      articleImagesExists = false
    }

    expect(articleImagesExists).toBe(true)
  })

  it("Should have valid images for articles", function () {
    let PRESS = getVariable("index.html", "PRESS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let articleImagesValid = true

    try {
      PRESS = JSON.parse(PRESS)
      const missingImages = []

      for (let i = 0; i < PRESS.length; i++) {
        const imageFile = "img_Press_" + PRESS[i].i + ".webp"
        try {
          getImageSize(imageFile, "utf8")
        } catch (err2) {
          articleImagesValid =
            "Invalid articles image files: " + missingImages.join(", ")
        }
      }

      if (missingImages.length > 0) {
        articleImagesValid = missingImages.join(", ")
      }
    } catch (err) {
      articleImagesValid = false
    }

    expect(articleImagesValid).toBe(true)
  })

  it("Should show descriptions for articles", function () {
    let PRESS = getVariable("index.html", "PRESS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let showingArticlesDescriptions = true

    try {
      PRESS = JSON.parse(PRESS)
      const missingArticleDescriptions = []

      for (let i = 0; i < PRESS.length; i++) {
        const description = PRESS[i].d
        if (description === "" || typeof description !== "string") {
          missingArticleDescriptions.push(
            "Article " + (i + 1) + " is not showing a valid description"
          )
        }
      }

      if (missingArticleDescriptions.length > 0) {
        showingArticlesDescriptions = missingArticleDescriptions.join(", ")
      }
    } catch (err) {
      showingArticlesDescriptions = false
    }

    expect(showingArticlesDescriptions).toBe(true)
  })

  it("Should show buttons for articles", function () {
    let PRESS = getVariable("index.html", "PRESS")
      .replace(/,\s*([}\]])/g, "$1")
      .replace(/([{\s,])([a-zA-Z0-9_]+)\s*:(?=(?:[^"]*"[^"]*")*[^"]*$)/g, '$1"$2":')

    let showingArticlesButtons = true

    try {
      PRESS = JSON.parse(PRESS)
      const missingButtons = []

      for (let i = 0; i < PRESS.length; i++) {
        const button = PRESS[i].b
        if (button !== "read" && button !== "watch") {
          missingButtons.push(
            "Article " + (i + 1) + " is not showing a valid button"
          )
        }
      }

      if (missingButtons.length > 0) {
        showingArticlesButtons = missingButtons.join(", ")
      }
    } catch (err) {
      showingArticlesButtons = false
    }

    expect(showingArticlesButtons).toBe(true)
  })

  it("Should load the cover image", function () {
    let imageCoverLoaderFound = true

    try {
      const content = readFileSync("index.html", "utf8")
      if (content.includes("img_Cover")) {
        imageCoverLoaderFound = true
      } else {
        imageCoverLoaderFound = "Image cover loader not found"
      }
    } catch (err) {
      imageCoverLoaderFound = "Image cover loader not found"
    }

    expect(imageCoverLoaderFound).toBe(true)
  })

  it("Should have an existing cover image", function () {
    let coverImageExists = true

    try {
      readFileSync("img_Cover.webp", "utf8")
    } catch (err) {
      coverImageExists = false
    }

    expect(coverImageExists).toBe(true)
  })

  it("Should have a valid cover image", function () {
    let imageValid = true
    try {
      getImageSize("img_Cover.webp", "utf8")
    } catch (err) {
      imageValid = false
    }
    expect(imageValid).toBe(true)
  })
})

describe("license.txt", function () {
  it("Should exist", function () {
    expect(fileExists("license.txt")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "792cf31f"
    let currentHash = ""

    try {
      const content = readFileSync("license.txt", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("privacy.html", function () {
  it("Should exist", function () {
    expect(fileExists("privacy.html")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "102f2163"
    let currentHash = ""

    try {
      const content = readFileSync("privacy.html", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("profile1.webp", function () {
  it("Should exist", function () {
    expect(fileExists("profile1.webp")).toBe(true)
  })

  it("Should be a valid image", function () {
    let imageValid = true
    try {
      getImageSize("profile1.webp", "utf8")
    } catch (err) {
      imageValid = false
    }
    expect(imageValid).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "14286336"
    let currentHash = ""

    try {
      const content = readFileSync("profile1.webp", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("profile2.webp", function () {
  it("Should exist", function () {
    expect(fileExists("profile2.webp")).toBe(true)
  })

  it("Should be a valid image", function () {
    let imageValid = true
    try {
      getImageSize("profile2.webp", "utf8")
    } catch (err) {
      imageValid = false
    }
    expect(imageValid).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "1242b837"
    let currentHash = ""

    try {
      const content = readFileSync("profile2.webp", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("robots.txt", function () {
  it("Should exist", function () {
    expect(fileExists("robots.txt")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "6f7f4579"
    let currentHash = ""

    try {
      const content = readFileSync("robots.txt", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("share.webp", function () {
  it("Should exist", function () {
    expect(fileExists("share.webp")).toBe(true)
  })

  it("Should be a valid image", function () {
    let imageValid = true
    try {
      getImageSize("share.webp", "utf8")
    } catch (err) {
      imageValid = false
    }
    expect(imageValid).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "5a84123e"
    let currentHash = ""

    try {
      const content = readFileSync("share.webp", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("sitemap.xml", function () {
  it("Should exist", function () {
    expect(fileExists("sitemap.xml")).toBe(true)
  })

  it("Should not have changed", function () {
    const expectedHash = "48318304"
    let currentHash = ""

    try {
      const content = readFileSync("sitemap.xml", "utf8")
      currentHash = generateHash(content)
    } catch (err) {
      currentHash = ""
    }

    expect(currentHash).toBe(expectedHash)
  })
})

describe("No inline styles", function () {
  const allFiles = findAllFilesRecursive(startDir).sort(alphaNumericSort)
  const targetExts = [".html", ".htm", ".js"]
  const filesToCheck = allFiles.filter(function (file) {
    return targetExts.includes(extname(file))
  })

  filesToCheck.forEach(function (file) {
    const filename = file.substring(startDir.length + 1)
    it(filename + " should not have inline styles", function () {
      const content = readFileSync(file, "utf8")
      const lines = content.split(/\r?\n/)
      let inlineDetected = []

      lines.forEach(function (line, index) {
        if (/style\=\"/gm.test(line)) {
          inlineDetected.push("L:" + (index + 1))
        }
      })

      let fileResult = false

      if (inlineDetected.length > 0) {
        fileResult = inlineDetected.join(", ")
      }

      expect(fileResult).toBe(false)
    })
  })
})
